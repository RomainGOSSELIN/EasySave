<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="welcome" xml:space="preserve">
    <value>Benvenuti nel software di gestione dei backup EasySave. Scrivere "exit" per uscire.</value>
  </data>
  <data name="title" xml:space="preserve">
    <value>Applicazione di backup dei file</value>
  </data>
  <data name="option_type" xml:space="preserve">
    <value>Selezionare un lavoro di backup completo</value>
  </data>
  <data name="option_source" xml:space="preserve">
    <value>Directory di origine del processo di backup</value>
  </data>
  <data name="option_name" xml:space="preserve">
    <value>Nome del lavoro di backup</value>
  </data>
  <data name="option_lang" xml:space="preserve">
    <value>Selezione della lingua</value>
  </data>
  <data name="option_id" xml:space="preserve">
    <value>Numero del lavoro di backup</value>
  </data>
  <data name="option_dest" xml:space="preserve">
    <value>Destinazione della directory del lavoro di backup</value>
  </data>
  <data name="desc_show" xml:space="preserve">
    <value>Visualizzazione di un lavoro di backup</value>
  </data>
  <data name="desc_run" xml:space="preserve">
    <value>Avviare un processo di backup</value>
  </data>
  <data name="desc_options" xml:space="preserve">
    <value>Impostare le opzioni (come la lingua)</value>
  </data>
  <data name="desc_delete" xml:space="preserve">
    <value>Eliminare un lavoro di backup</value>
  </data>
  <data name="desc_create" xml:space="preserve">
    <value>Creare un nuovo lavoro di backup</value>
  </data>
  <data name="change_at_restart" xml:space="preserve">
    <value>Le modifiche verranno apportate al prossimo avvio</value>
  </data>
  <data name="number" xml:space="preserve">
    <value>Numero</value>
  </data>
  <data name="no_job_found" xml:space="preserve">
    <value>Nessun lavoro trovato</value>
  </data>
  <data name="job_name" xml:space="preserve">
    <value>Nome del lavoro</value>
  </data>
  <data name="source" xml:space="preserve">
    <value>Fonte</value>
  </data>
  <data name="destination" xml:space="preserve">
    <value>Destinazione</value>
  </data>
  <data name="type" xml:space="preserve">
    <value>Tipo</value>
  </data>
  <data name="cant_create_more_job" xml:space="preserve">
    <value>Non puoi creare più di 5 lavori.</value>
  </data>
  <data name="delete_job_success" xml:space="preserve">
    <value>Il lavoro numero {0} è stato eliminato con successo.</value>
  </data>
  <data name="create_job_success" xml:space="preserve">
    <value>Il lavoro {0} è stato creato nella posizione {1} da {2} a {3} con tipo {4}</value>
  </data>
  <data name="job_doesnt_exist" xml:space="preserve">
    <value>Il lavoro {0} non esiste</value>
  </data>
  <data name="job_execution" xml:space="preserve">
    <value>Processo di backup in esecuzione: {0}</value>
  </data>
  <data name="source_directory_doesnt_exist" xml:space="preserve">
    <value>La directory di origine non esiste.</value>
  </data>
  <data name="save_type_error" xml:space="preserve">
    <value>Il tipo di backup non è valido.</value>
  </data>
  <data name="backup_success" xml:space="preserve">
    <value>Il backup è stato completato con successo!</value>
  </data>
  <data name="backup_error" xml:space="preserve">
    <value>Si è verificato un errore durante il salvataggio: {0}</value>
  </data>
  <data name="copy_success" xml:space="preserve">
    <value>La copia è terminata!</value>
  </data>
  <data name="copy_file" xml:space="preserve">
    <value>Copia del file: {0}</value>
  </data>
  <data name="incorrect_format" xml:space="preserve">
    <value>Il formato file {0} non è consentito per il backup.</value>
  </data>
  <data name="maxsize_error" xml:space="preserve">
    <value>Il file {0} supera la dimensione massima consentita.</value>
  </data>
</root>